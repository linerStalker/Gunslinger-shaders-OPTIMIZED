








#define  g_f2RTSize (pos_decompression_params2.xy)





#if (MSAA_SAMPLES==2)

    #define MSAA_SAMPLE_INDEX (0)

#elif (MSAA_SAMPLES==4)

    #define MSAA_SAMPLE_INDEX (3)

#elif (MSAA_SAMPLES==8)

    #define MSAA_SAMPLE_INDEX (6)

#else

    #define MSAA_SAMPLE_INDEX (0)

#endif

#ifdef SM_5_0

RWTexture2D<float>g_ResultTexture:register(u0);
#endif

#ifdef GBUFFER_OPTIMIZATION
#define g_txDepth s_position
#define g_txNormal s_position
#else
#define g_txDepth s_position
#define g_txNormal s_normal
#endif


#define g_SamplePoint smp_nofilter





static float g_fHDAORejectRadius=0.43f;
static float g_fHDAOAcceptRadius=0.0001f;
static float g_fHDAOIntensity =0.5f;    
static float g_fHDAONormalScale=0.10f;






#define GROUP_TEXEL_DIM			(56)
#define GROUP_THREAD_DIM		(32)
#define GROUP_TEXEL_OVERLAP		(12)


#define GATHER_THREADS			(784)
#define GATHER_THREADS_PER_ROW	(28)
#define GATHER_PER_THREAD		(1)


#define ALU_DIM				    (32)

#ifdef SM_5_0

    
    
    

    groupshared struct
    {
        float fCameraZ[GROUP_TEXEL_DIM][GROUP_TEXEL_DIM];
}g_LDS;


    
    
    
    
    
    float LoadFromLDS(uint2 u2Texel)
    {
	    return g_LDS.fCameraZ[u2Texel.y][u2Texel.x];
}

    
    
    
    
    
    void StoreToLDS(float fValue,uint2 u2Texel)
    {
	    g_LDS.fCameraZ[u2Texel.y][u2Texel.x]=fValue;
}

#endif






#if SSAO_QUALITY>=3

    #define NUM_VALLEYS (48)

    static const int2 g_i2HDAOSamplePattern[48]=
    {
	    {0,-11},
	    {2,-10},
	    {0,-9},
	    {5,-9},
	    {2,-8},
	    {7,-8},
	    {0,-7},
	    {5,-7},
	    {2,-6},
	    {7,-6},
	    {8,-6},
	    {0,-5},
	    {5,-5},
	    {10,-5},
	    {2,-4},
	    {7,-4},
	    {0,-3},
	    {5,-3},
	    {10,-3},
	    {2,-2},
	    {7,-2},
	    {0,-1},
	    {5,-1},
	    {10,-1},
	    {2,0},
	    {7,0},
	    {5,1},
	    {10,1},
	    {2,2},
	    {7,2},
	    {5,3},
	    {10,3},
	    {2,4},
	    {7,4},
	    {5,5},
	    {10,5},
	    {2,6},
	    {7,6},
	    {5,7},
	    {6,7},
	    {10,7},
	    {2,8},
	    {7,8},
	    {5,9},
	    {2,10},
	    {7,10},
	    {5,11},
	    {2,12},
};

    static const float g_fHDAOSampleWeights[48]=
    {
	    0.1538,
	    0.2155,
	    0.3077,
	    0.2080,
	    0.3657,
	    0.1823,
	    0.4615,
	    0.3383,
	    0.5135,
	    0.2908,
	    0.2308,
	    0.6154,
	    0.4561,
	    0.1400,
	    0.6560,
	    0.3798,
	    0.7692,
	    0.5515,
	    0.1969,
	    0.7824,
	    0.4400,
	    0.9231,
	    0.6078,
	    0.2269,
	    0.8462,
	    0.4615,
	    0.6078,
	    0.2269,
	    0.7824,
	    0.4400,
	    0.5515,
	    0.1969,
	    0.6560,
	    0.3798,
	    0.4561,
	    0.1400,
	    0.5135,
	    0.2908,
	    0.3383,
	    0.2908,
	    0.0610,
	    0.3657,
	    0.1823,
	    0.2080,
	    0.2155,
	    0.0610,
	    0.0705,
	    0.0642,
};

    static float g_fWeightTotal=18.4198;
#endif



#define NUM_NORMAL_LOADS (4)
static const int2 g_i2NormalLoadPattern[4]=
{
	{0,-9},
	{6,-6},
	{10,0},
	{8,9},
};

#if SSAO_QUALITY>=3



float ValleyAngle(uint2 u2ScreenCoord)
{
	float fSummedDot=0.0f;
	float3 f3N1, f3N2;
    #ifdef GBUFFER_OPTIMIZATION
	float3 N=gbuf_unpack_normal(g_txNormal.Load(int3(u2ScreenCoord,0),MSAA_SAMPLE_INDEX).xy);
	#else
	float3 N=g_txNormal.Load(int3(u2ScreenCoord,0),MSAA_SAMPLE_INDEX).xyz;
	#endif

	for(uint iNormal=0;iNormal<NUM_NORMAL_LOADS;++iNormal)
	{
		int2 i2MirrorPattern=g_i2NormalLoadPattern[iNormal]*int2(-1,-1);
		int2 i2OffsetScreenCoord=u2ScreenCoord+g_i2NormalLoadPattern[iNormal];
		int2 i2MirrorOffsetScreenCoord=u2ScreenCoord+i2MirrorPattern;
		
		
		i2OffsetScreenCoord=(i2OffsetScreenCoord>(g_f2RTSize-float2(1.0f,1.0f)))?(g_f2RTSize-float2(1.0f,1.0f)):(i2OffsetScreenCoord);
		i2MirrorOffsetScreenCoord=(i2MirrorOffsetScreenCoord>(g_f2RTSize-float2(1.0f,1.0f)))?(g_f2RTSize-float2(1.0f,1.0f)):(i2MirrorOffsetScreenCoord);
		i2OffsetScreenCoord=(i2OffsetScreenCoord<0)?(0):(i2OffsetScreenCoord);
		i2MirrorOffsetScreenCoord=(i2MirrorOffsetScreenCoord<0)?(0):(i2MirrorOffsetScreenCoord);
						
    #ifdef GBUFFER_OPTIMIZATION
		f3N1.xy=g_txNormal.Load(int3(i2OffsetScreenCoord,0),MSAA_SAMPLE_INDEX).xy;
		f3N1.xyz=gbuf_unpack_normal(f3N1.xy);
		f3N2.xy=g_txNormal.Load(int3(i2MirrorOffsetScreenCoord,0),MSAA_SAMPLE_INDEX).xy;
		f3N2.xyz=gbuf_unpack_normal(f3N2.xy);
    #else
		f3N1.xyz=g_txNormal.Load(int3(i2OffsetScreenCoord,0),MSAA_SAMPLE_INDEX).xyz;
		f3N2.xyz=g_txNormal.Load(int3(i2MirrorOffsetScreenCoord,0),MSAA_SAMPLE_INDEX).xyz;
    #endif
		
		float fDot=dot(f3N1,N);
		
		fSummedDot+=(fDot>0.98f)?(0.0f):(1.0f-(abs(fDot)*0.25f));

		fDot=dot(f3N2,N);
		
		fSummedDot+=(fDot>0.98f)?(0.0f):(1.0f-(abs(fDot)*0.25f));
}

	fSummedDot/=8.0f;
	fSummedDot+=0.5f;
	fSummedDot=(fSummedDot<=0.5f)?(fSummedDot/10.0f):(fSummedDot);
		
	return fSummedDot;
}
#endif

#ifdef SM_5_0

#if SSAO_QUALITY>=3
    float ComputeHDAO(uint2 u2CenterTexel,uint2 u2ScreenPos)
    {
	    float fOcclusion=0.0f;
	    
	    float fDot=ValleyAngle(u2ScreenPos);
	    
	    float fCenterZ=LoadFromLDS(u2CenterTexel);
		float2 f2SampledZ;
	    
	    [unroll]
        for(uint uValley=0;uValley<NUM_VALLEYS;++uValley)
	    {
		    
		    f2SampledZ.x=LoadFromLDS(u2CenterTexel+g_i2HDAOSamplePattern[uValley]);
		    f2SampledZ.y=LoadFromLDS(u2CenterTexel-g_i2HDAOSamplePattern[uValley]);
    		
		    
		    float2 f2Diff=fCenterZ.xx-f2SampledZ;
		    float2 f2Compare=(f2Diff<g_fHDAORejectRadius.xx)?(1.0f):(0.0f);
		    f2Compare*=(f2Diff>g_fHDAOAcceptRadius.xx)?(1.0f):(0.0f);
    		
		    
		    fOcclusion+=(f2Compare.x*f2Compare.y*g_fHDAOSampleWeights[uValley]);
	}
    	
	    
	    fOcclusion/=g_fWeightTotal;
	    fOcclusion*=g_fHDAOIntensity*fDot;
	    fOcclusion*=fCenterZ<0.5f?0.0f:lerp(0.0f,1.0f,saturate(fCenterZ-0.5f));
	    fOcclusion=1.0f-saturate(fOcclusion);
    	
	    return fOcclusion;
}
#endif

    
    
    
    
    [numthreads(GROUP_THREAD_DIM,GROUP_THREAD_DIM,1)]
    void main(uint3 Gid:SV_GroupID,uint3 GTid:SV_GroupThreadID,uint GI:SV_GroupIndex)
    #ifndef	SSAO_QUALITY
    {
        
	    uint2 u2ScreenPos=uint2(Gid.x*ALU_DIM+GTid.x,Gid.y*ALU_DIM+GTid.y);
    		
	    
	    if((u2ScreenPos.x<uint(g_f2RTSize.x))&& (u2ScreenPos.y<uint(g_f2RTSize.y)))
	    {
            
            g_ResultTexture[u2ScreenPos.xy]=1.0f;
   }
}
    #elif SSAO_QUALITY<3
    {
        
	    uint2 u2ScreenPos=uint2(Gid.x*ALU_DIM+GTid.x,Gid.y*ALU_DIM+GTid.y);
    		
	    
	    if((u2ScreenPos.x<uint(g_f2RTSize.x))&& (u2ScreenPos.y<uint(g_f2RTSize.y)))
	    {
            
            g_ResultTexture[u2ScreenPos.xy]=1.0f;
   }
}
    #elif SSAO_QUALITY>=3
    {
	    if(GI<GATHER_THREADS)
	    {
		    
		    uint uColumn=(GI % GATHER_THREADS_PER_ROW)*GATHER_PER_THREAD*2;
		    uint uRow=(GI/GATHER_THREADS_PER_ROW)*2;
		    float2 f2ScreenCoord=float2((float2(Gid.x,Gid.y)*float2(ALU_DIM,ALU_DIM))-float2(GROUP_TEXEL_OVERLAP,GROUP_TEXEL_OVERLAP))+float2(uColumn,uRow);
		    
            #ifndef USE_MSAA
                
                f2ScreenCoord+=float2(1.0f,1.0f);
				float2 f2InvTextureSize=1.0f/g_f2RTSize;
            #endif
		    
		    [unroll] 
            for(uint uGather=0;uGather<GATHER_PER_THREAD;++uGather)
		    {
			    #ifdef USE_MSAA

                    float2 f2Coord=f2ScreenCoord.x+float(uGather*2),f2ScreenCoord.y;
                    float4 f4Depth;
					float4 f4Normal;
                    
					f4Depth.x=g_txDepth.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(0,1,0)).z;
	                f4Depth.y=g_txDepth.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(1,1,0)).z;
	                f4Depth.z=g_txDepth.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(1,0,0)).z;
	                f4Depth.w=g_txDepth.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(0,0,0)).z;
                    
                    #ifdef GBUFFER_OPTIMIZATION
                        f4Normal.x=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(0,1,0)).x;
                        f4Normal.y=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(1,1,0)).x;
	                    f4Normal.z=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(1,0,0)).x;
	                    f4Normal.w=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(0,0,0)).x;
	                #else
                        f4Normal.x=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(0,1,0)).z;
                        f4Normal.y=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(1,1,0)).z;
	                    f4Normal.z=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(1,0,0)).z;
	                    f4Normal.w=g_txNormal.Load(int3(f2Coord,0),MSAA_SAMPLE_INDEX,int3(0,0,0)).z;
	                #endif
                #else

                    float2 f2Coord=float2(f2ScreenCoord.x+float(uGather*2),f2ScreenCoord.y)*f2InvTextureSize;
                    float4 f4Depth=g_txDepth.GatherBlue(g_SamplePoint,f2Coord);
                    #ifdef GBUFFER_OPTIMIZATION
                        float4 f4Normal=g_txNormal.GatherRed (g_SamplePoint,f2Coord);
                    #else
                        float4 f4Normal=g_txNormal.GatherBlue(g_SamplePoint,f2Coord);
                    #endif
                #endif
            
                float4 f4LDSValue=f4Depth+(f4Normal*g_fHDAONormalScale.xxxx);
    		
                StoreToLDS(f4LDSValue.x,uint2(uColumn+(uGather*2)+0,uRow+1));
                StoreToLDS(f4LDSValue.y,uint2(uColumn+(uGather*2)+1,uRow+1));
                StoreToLDS(f4LDSValue.z,uint2(uColumn+(uGather*2)+1,uRow+0));
                StoreToLDS(f4LDSValue.w,uint2(uColumn+(uGather*2)+0,uRow+0));
       	}
	}
    	    
	    
	    GroupMemoryBarrierWithGroupSync();
    	
        
	    uint2 u2ScreenPos=uint2(Gid.x*ALU_DIM+GTid.x,Gid.y*ALU_DIM+GTid.y);
    		
	    
	    if((u2ScreenPos.x<uint(g_f2RTSize.x))&& (u2ScreenPos.y<uint(g_f2RTSize.y)))
	    {
            
            g_ResultTexture[u2ScreenPos.xy]=ComputeHDAO(uint2(GTid.x+GROUP_TEXEL_OVERLAP,GTid.y+GROUP_TEXEL_OVERLAP),u2ScreenPos);
   }
}
#endif


#else





float	calc_new_hdao(float3 P,float3 N,float2 tc)
#ifndef	SSAO_QUALITY
{
	return 1.0f;
}
#elif SSAO_QUALITY>=3
{
	
	uint2 u2CenterScreenCoord;
	float2 f2SampledZ, f2Diff, f2Compare;
	float fOcclusion=0.0f;

	
	u2CenterScreenCoord=uint2(floor(tc*g_f2RTSize));
	
	
	float fDot=ValleyAngle(u2CenterScreenCoord);

	
	float fDepth=g_txDepth.Load(int3(u2CenterScreenCoord,0),MSAA_SAMPLE_INDEX).z;
    #ifdef GBUFFER_OPTIMIZATION
        float fCenterZ=fDepth+(g_txNormal.Load(int3(u2CenterScreenCoord,0),MSAA_SAMPLE_INDEX).x*g_fHDAONormalScale);
    #else
        float fCenterZ=fDepth+(g_txNormal.Load(int3(u2CenterScreenCoord,0),MSAA_SAMPLE_INDEX).z*g_fHDAONormalScale);
    #endif
	
	
	for(uint iValley=0;iValley<NUM_VALLEYS;++iValley)
	{
		
        f2SampledZ.x=g_txDepth.Load(int3((u2CenterScreenCoord+g_i2HDAOSamplePattern[iValley]),0),MSAA_SAMPLE_INDEX).z;
		f2SampledZ.y=g_txDepth.Load(int3((u2CenterScreenCoord-g_i2HDAOSamplePattern[iValley]),0),MSAA_SAMPLE_INDEX).z;

        
        #ifdef GBUFFER_OPTIMIZATION
	        f2SampledZ.x+=(g_txNormal.Load(int3((u2CenterScreenCoord+g_i2HDAOSamplePattern[iValley]),0),MSAA_SAMPLE_INDEX).x*g_fHDAONormalScale);
	        f2SampledZ.y+=(g_txNormal.Load(int3((u2CenterScreenCoord-g_i2HDAOSamplePattern[iValley]),0),MSAA_SAMPLE_INDEX).x*g_fHDAONormalScale);
	    #else
	        f2SampledZ.x+=(g_txNormal.Load(int3((u2CenterScreenCoord+g_i2HDAOSamplePattern[iValley]),0),MSAA_SAMPLE_INDEX).z*g_fHDAONormalScale);
	        f2SampledZ.y+=(g_txNormal.Load(int3((u2CenterScreenCoord-g_i2HDAOSamplePattern[iValley]),0),MSAA_SAMPLE_INDEX).z*g_fHDAONormalScale);
	    #endif

		
		f2Diff=fCenterZ.xx-f2SampledZ;
		f2Compare=(f2Diff<g_fHDAORejectRadius.xx)?(1.0f):(0.0f);
		f2Compare*=(f2Diff>g_fHDAOAcceptRadius.xx)?(1.0f):(0.0f);
						
		
		fOcclusion+=f2Compare.x*f2Compare.y*g_fHDAOSampleWeights[iValley];
}
					
	
	fOcclusion/=g_fWeightTotal;
	fOcclusion*=g_fHDAOIntensity*fDot;
	fOcclusion*=fCenterZ<0.5f?0.0f:lerp(0.0f,1.0f,saturate(fCenterZ-0.5f));
	fOcclusion=1.0f-saturate(fOcclusion);
	
	return fOcclusion;
}
#endif

#endif