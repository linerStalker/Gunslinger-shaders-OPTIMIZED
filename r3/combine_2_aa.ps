#include "common.h"

#ifdef 	USE_DISTORT
Texture2D			s_distort;
#endif
uniform float4 		e_barrier,e_weights,e_kernel;

float4x4	m_current,m_previous;
float2 	m_blur;		// scale_x / 12, scale_y / 12

float3 	mblur	(float2 UV, float3 pos, float3 blurred)
{
	float4 	pos4		= float4	(pos,1.h);

	float4 	p_current	= mul	(m_current,	pos4);
	float4 	p_previous 	= mul	(m_previous,	pos4);
	float2 	p_velocity 	= m_blur * ( (p_current.xy/p_current.w)-(p_previous.xy/p_previous.w) );
		p_velocity	= clamp	(p_velocity,-0.001,+0.001);

	// For each sample, sum up each sample's color in "Blurred" and then divide
	// to average the color after all the samples are added.
	blurred 	+= 	s_image.Sample(smp_rtlinear,p_velocity * 1.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 2.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 3.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 4.h  + UV).rgb;
	blurred 	+= 	s_image.Sample(smp_rtlinear,p_velocity * 5.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 6.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 7.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 8.h  + UV).rgb;
	blurred 	+= 	s_image.Sample(smp_rtlinear,p_velocity * 9.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 10.h + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 11.h + UV).rgb;
	return 	blurred/12.f;
}

#ifdef GBUFFER_OPTIMIZATION
float4 main (v_aa_AA I,float4 pos2d:SV_POSITION):SV_Target
#else
float4 main (v_aa_AA I):SV_Target
#endif
{
#ifdef GBUFFER_OPTIMIZATION
  gbuffer_data gbd0=gbuffer_load_data(I.Tex0,pos2d);
  gbuffer_data gbd1=gbuffer_load_data_offset(I.Tex0,I.Tex1,pos2d);
  gbuffer_data gbd2=gbuffer_load_data_offset(I.Tex0,I.Tex2,pos2d);
  gbuffer_data gbd3=gbuffer_load_data_offset(I.Tex0,I.Tex3,pos2d);
  gbuffer_data gbd4=gbuffer_load_data_offset(I.Tex0,I.Tex4,pos2d);
#else
  gbuffer_data gbd0=gbuffer_load_data(I.Tex0,0);
  gbuffer_data gbd1=gbuffer_load_data(I.Tex1,0);
  gbuffer_data gbd2=gbuffer_load_data(I.Tex2,0);
  gbuffer_data gbd3=gbuffer_load_data(I.Tex3,0);
  gbuffer_data gbd4=gbuffer_load_data(I.Tex4,0);
#endif
  
  
  
	float3 nc=gbd0.N;
  float4 nd;




	nd.x=dot 		(nc,(float3)(gbd1).N);
	nd.y=dot 		(nc,(float3)(gbd2).N);
	nd.z=dot 		(nc,(float3)(gbd3).N);
	nd.w=dot 		(nc,(float3)(gbd4).N);
	nd -=e_barrier.x;
	nd=step		(0,nd);
  float  ne=saturate	(dot(nd,e_weights.x));

  
  float4 tc5r=I.Tex5.wzyx;
  float4 tc6r=I.Tex6.wzyx;
  
#ifdef GBUFFER_OPTIMIZATION
  gbuffer_data gbd5=gbuffer_load_data_offset(I.Tex0,I.Tex5,pos2d);
  gbuffer_data gbd6=gbuffer_load_data_offset(I.Tex0,I.Tex6,pos2d);
  gbuffer_data gbd5r=gbuffer_load_data_offset(I.Tex0,tc5r,pos2d);
  gbuffer_data gbd6r=gbuffer_load_data_offset(I.Tex0,tc6r,pos2d);
#else
  gbuffer_data gbd5=gbuffer_load_data(I.Tex5,0);
  gbuffer_data gbd6=gbuffer_load_data(I.Tex6,0);
  gbuffer_data gbd5r=gbuffer_load_data(tc5r,0);
  gbuffer_data gbd6r=gbuffer_load_data(tc6r,0);
#endif

  

  float4 dc=float4(gbd0.P,gbd0.mtl);
  float4 dd;




	dd.x=(float)gbd1.P.z 
	+	(float)gbd2.P.z;
	dd.y=(float)gbd3.P.z 
	+	(float)gbd4.P.z;
	dd.z=(float)gbd5.P.z 
	+	(float)gbd5r.P.z;
	dd.w=(float)gbd6.P.z 
	+	(float)gbd6r.P.z;
	dd=abs(2*dc.z-dd)-e_barrier.y;
	dd=step		(dd,0);
  float  de=saturate	(dot(dd,e_weights.y));

  
  float 	w=(1-de*ne)*e_kernel.x;

#ifdef 	USE_DISTORT
	float4 	distort=s_distort.Sample(smp_nofilter,I.Tex0);
	float2	doffs=(distort.xy-.5h)*def_distort;
	float2	center=I.Tex0+doffs;
#else
	float2	center=I.Tex0;
#endif

  
  

	float2	offset=center*(1-w);




	float4	s0=s_image.Sample(smp_rtlinear,offset+I.Tex1*w);
	float4	s1=s_image.Sample(smp_rtlinear,offset+I.Tex2*w);
	float4	s2=s_image.Sample(smp_rtlinear,offset+I.Tex3*w);
	float4	s3=s_image.Sample(smp_rtlinear,offset+I.Tex4*w);

	float3 	final=mblur(center,dc,(s0+s1+s2+s3)/4.h);


	return combine_bloom(final,s_bloom.Sample(smp_rtlinear,I.Tex0));
}