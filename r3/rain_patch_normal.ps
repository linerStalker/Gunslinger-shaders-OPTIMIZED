#include "common.h"
#include "lmodel.h"
#include "shadow.h"

#ifndef USE_SUNMASK
float3x4 m_sunmask;
#endif

Texture3D	s_water;
Texture2D	s_waterFall;
float4	RainDensity;
float4	WorldX;
float4	WorldZ;


float3	GetNVNMap(Texture3D s_texture,float2 tc,float time)
{
	float4 water=s_texture.SampleBias(smp_base,float3(tc,time),-3.)-0.5;
	water.xyz=water.wyz;
	water.xyz*=6;
	water.y=0;
	return water.xyz;
}


float3	GetWaterNMap(Texture2D s_texture,float2 tc)
{
	float4 water=s_texture.Sample(smp_base,tc);
	water.xyz=(water.xzy-0.5)*2;
	water.xyz*=0.3;
	water.y=0;

	return water.xyz;
}


#ifndef ISAMPLE
#define ISAMPLE 0
#endif


#ifdef GBUFFER_OPTIMIZATION
#ifdef MSAA_OPTIMIZATION
float4 main (float2 tc:TEXCOORD0,float2 tcJ:TEXCOORD1,float4	Color	:COLOR,float4 pos2d:SV_Position,uint iSample:SV_SAMPLEINDEX):SV_Target
#else
float4 main (float2 tc:TEXCOORD0,float2 tcJ:TEXCOORD1,float4	Color	:COLOR,float4 pos2d:SV_Position):SV_Target
#endif
#else
#ifdef MSAA_OPTIMIZATION
float4 main (float2 tc:TEXCOORD0,float2 tcJ:TEXCOORD1,uint iSample:SV_SAMPLEINDEX):SV_Target
#else
float4 main (float2 tc:TEXCOORD0,float2 tcJ:TEXCOORD1):SV_Target
#endif
#endif
{
#ifdef GBUFFER_OPTIMIZATION
#ifdef MSAA_OPTIMIZATION
	gbuffer_data gbd=gbuffer_load_data(tc,pos2d,iSample);
#else
	gbuffer_data gbd=gbuffer_load_data(tc,pos2d,ISAMPLE);
#endif
#else
#ifdef MSAA_OPTIMIZATION
	gbuffer_data gbd=gbuffer_load_data(tc,iSample);
#else
	gbuffer_data gbd=gbuffer_load_data(tc,ISAMPLE);
#endif
#endif
	float4 _P=float4(gbd.P,1.0);
	float3 _N=gbd.N;
	float3	D=gbd.C;

	_N.xyz=normalize(_N.xyz);
	//FIX FROM COMMIT https://github.com/ixray-team/ixray-1.6-stcop/commit/1b48891d14dc2f8dfa3bb49753b449298af9053c
	_P.xyz += _N.xyz * 0.15f;
	float4 PS=mul(m_shadow,_P);

	float3 WorldP=mul(m_sunmask,_P);
	float3 WorldN=mul(m_sunmask,_N.xyz);

	
	//FIX FROM COMMIT https://github.com/ixray-team/ixray-1.6-stcop/commit/1b48891d14dc2f8dfa3bb49753b449298af9053c
	//Read rain projection with some jetter. Also adding pixel normal 
	float s=shadow_hw(PS) * saturate(gbd.hemi * 10.0f);
	//factor to jitter to make rain strips more realistic.
	
	float	fAtten=1-smoothstep(5,20,_P.z);
	s*=fAtten*fAtten;

	
	s*=RainDensity.x;

	float fIsUp=-dot(Ldynamic_dir.xyz,_N.xyz);
	s*=saturate(fIsUp*10+(10*0.5)+0.5);
	fIsUp=max(0,fIsUp);

	float fIsX=WorldN.x;
	float fIsZ=WorldN.z;

	float3 waterSplash=GetNVNMap(s_water,WorldP.xz,timers.x*3.0);

	float3 tc1=WorldP/2;

	float fAngleFactor=1-fIsUp;

	fAngleFactor=0.1*ceil(10*fAngleFactor);

	fAngleFactor*=0.5;


	float3 waterFallX=GetWaterNMap(s_waterFall,float2(tc1.z,tc1.y+timers.x*fAngleFactor));
	float3 waterFallZ=GetWaterNMap(s_waterFall,float2(tc1.x,tc1.y+timers.x*fAngleFactor));

	float2 IsDir=(float2(fIsZ,fIsX));

	IsDir=normalize(IsDir);

	float3 waterFall=GetWaterNMap(s_waterFall,float2(dot(tc1.xz,IsDir),tc1.y+timers.x));
	

	float WeaponAttenuation=smoothstep(0.8,0.9,length(_P.xyz));
	float ApplyNormalCoeff=s*WeaponAttenuation;

	float3 water=waterSplash*(fIsUp*ApplyNormalCoeff);

	water+=waterFallX.yxz*(abs(fIsX)*ApplyNormalCoeff);
	water+=waterFallZ.zxy*(abs(fIsZ)*ApplyNormalCoeff);
	
	water.xyz=mul(m_V,water.xyz);

	_N+=water.xyz;

	_N=normalize(_N);

	s*=dot(D.xyz,float3(0.33,0.33,0.33));

	return float4(_N,s);
}