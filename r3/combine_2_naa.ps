#include "common.h"
#include "dof.h"

#define	EPSDEPTH	0.001
//#define TEST_MBLUR
#ifndef USE_MSAA
Texture2D 			s_distort;
#else
TEXTURE2DMS(float4,MSAA_SAMPLES) s_distort;
#endif
uniform float4 		e_barrier,e_weights,e_kernel;

struct c2_out
{
	float4	Color:SV_Target;
#ifdef USE_MSAA
	float	Depth:SV_Depth;
#endif
};

#ifdef TEST_MBLUR
float4x4	m_current,m_previous;
float2 	m_blur;		// scale_x / 12, scale_y / 12

float3 	mblur	(float2 UV, float3 pos, float3 blurred)
{
	float4 	pos4		= float4	(pos,1.h);

	float4 	p_current	= mul	(m_current,	pos4);
	float4 	p_previous 	= mul	(m_previous,	pos4);
	float2 	p_velocity 	= m_blur * ( (p_current.xy/p_current.w)-(p_previous.xy/p_previous.w) );
		p_velocity	= clamp	(p_velocity,-0.001,+0.001);

	// For each sample, sum up each sample's color in "Blurred" and then divide
	// to average the color after all the samples are added.
	blurred 	+= 	s_image.Sample(smp_rtlinear,p_velocity * 1.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 2.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 3.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 4.h  + UV).rgb;
	blurred 	+= 	s_image.Sample(smp_rtlinear,p_velocity * 5.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 6.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 7.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 8.h  + UV).rgb;
	blurred 	+= 	s_image.Sample(smp_rtlinear,p_velocity * 9.h  + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 10.h + UV).rgb;
	blurred		+= 	s_image.Sample(smp_rtlinear,p_velocity * 11.h + UV).rgb;
	return 	blurred/12.f;
}
#endif

c2_out main(v2p_aa_AA I)
{
	c2_out	res;
	res.Color=float4(0,0,0,0);

	int iSample=0;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbd=gbuffer_load_data(I.Tex0,I.HPos,iSample);
#else
	gbuffer_data gbd=gbuffer_load_data(I.Tex0,iSample);
#endif
	
#ifdef 	USE_DISTORT


  	float 	depth=gbd.P.z;
#ifndef USE_MSAA
	float4 	distort=s_distort.Sample(smp_nofilter,I.Tex0);
#else 
	float4 	distort=s_distort.Load(int3(I.Tex0*pos_decompression_params2.xy,0),iSample);
#endif 
	float2	offset=(distort.xy-(127.0h/255.0h))*def_distort;
	float2	center=I.Tex0+offset;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbdx=gbuffer_load_data_offset(I.Tex0,center,I.HPos,iSample);
#else
	gbuffer_data gbdx=gbuffer_load_data_offset(center,iSample);
#endif


	float 	depth_x=gbdx.P.z;
	if ((depth_x+EPSDEPTH)<depth)	center=I.Tex0;
#else 
	float2	center=I.Tex0;
#endif
   	

	float3	img=dof(center);

	float4 	bloom=s_bloom.Sample(smp_rtlinear,center);
	

#ifdef TEST_MBLUR
	img=mblur(center,(gbd).P,img.rgb);
#else
	img=img.rgb;
#endif

#ifdef 	USE_DISTORT
 	float3	blurred=bloom*def_hdr;
			img=lerp	(img,blurred,distort.z);
#endif

 	res.Color+=combine_bloom(img,bloom);
#ifdef USE_MSAA
	float4 ptp=mul(m_P,float4(gbd.P,1));
	res.Depth=ptp.w==0?1:ptp.z/ptp.w;
#endif
	
	return res;
}