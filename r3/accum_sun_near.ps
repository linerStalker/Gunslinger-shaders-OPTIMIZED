#include "common.h"
#include "lmodel.h"

#ifdef USE_MINMAX_SM
#define SM_MINMAX
#endif

#if SUN_QUALITY>2
#define ULTRA_SHADOWS_ON
#endif 

#ifdef ULTRA_SHADOWS_ON
#define USE_ULTRA_SHADOWS
#endif

#include "shadow.h"

#ifdef USE_SUNFILTER
#ifdef MSAA_OPTIMIZATION
float4 main (v2p_volume I,uint iSample:SV_SAMPLEINDEX):SV_Target
#else
float4 main (v2p_volume I):SV_Target
#endif
{
	

	gbuffer_data gbd=gbuffer_load_data(GLD_P(I.tc,I.hpos,ISAMPLE));

#ifdef GBUFFER_OPTIMIZATION
	
	gbd.P+=gbd.N*0.015f;
#endif	

	float4 _P=float4(gbd.P,1.f);

	float4 PS=mul(m_shadow,_P);

	float s=shadowtest_sun(PS)*
	#ifdef USE_SUNMASK
	sunmask(_P)
	#else
	1.h
	#endif
	;

	return s;
}
#else
#ifdef MSAA_OPTIMIZATION
float4 main (v2p_volume I,uint iSample:SV_SAMPLEINDEX):SV_Target
#else
float4 main (v2p_volume I):SV_Target
#endif
{
	
	

	gbuffer_data gbd=gbuffer_load_data(GLD_P(I.tc.xy/I.tc.w,I.hpos,ISAMPLE));

#ifdef GBUFFER_OPTIMIZATION
	
	gbd.P+=gbd.N*0.015f;
#endif	

	float4 _P=float4(gbd.P,gbd.mtl);
	float4  _N=float4(gbd.N,gbd.hemi);

	
	float	m=xmaterial;
# ifndef USE_R2_STATIC_SUN
			m=_P.w;
# endif
	float4	light=plight_infinity (m,_P,_N,Ldynamic_dir);

	
  	float4 	P4=float4(_P.x,_P.y,_P.z,1.f);
	float4 	PS=mul(m_shadow,P4);
	#ifdef USE_SUNMASK
	float 	s=sunmask(P4);
	#else
	float s=1.h;
	#endif
	#if SUN_QUALITY==2 
	  		s*=shadow_high(PS);
	#else
#ifdef SM_MINMAX
	s*=shadow(PS);
#else
	s*=shadow(PS);
#endif
	#endif

	return 		blend(Ldynamic_color*light*s,I.tc);
}
#endif